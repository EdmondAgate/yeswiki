<?php

abstract class Actions
{
    /**
     * an array containing all the actions that are implemented by an object
     */
    public $actionObjects;

    /**
     * Executes an "action" module and returns the generated output
     *
     * @param string $action
     *            The name of the action and its eventual parameters,
     *            as it appears in the page between "{{" and "}}"
     * @param boolean $forceLinkTracking
     *            By default, the link tracking will be disabled
     *            during the call of an action. Set this value to
     *            <code>true</code> to allow it.
     * @param array $vars
     *            An array of additionnal parameters to give to the action, in
     *            the form array( 'param' => 'value').
     *            This allows you to call Action() internally, setting $action
     *            to the name of the action you want to call and it's parameters
     *            in an array, wich is more efficient than the pattern-matching
     *            algorithm used to extract the parameters from $action.
     * @return The output generated by the action.
     */
    public function action($action, $forceLinkTracking = 0, $vars = array())
    {
        $cmd = trim($action);
        $cmd = str_replace("\n", ' ', $cmd);

        // extract $action and $varsTemp ("raw" attributes)
        if (! preg_match("/^([a-zA-Z-0-9]+)\/?(.*)$/", $cmd, $matches)) {
            // TODO UGLY no html !!
            return '<div class="alert alert-danger">'
                . _t('INVALID_ACTION')
                . ' &quot;'
                . htmlspecialchars($cmd, ENT_COMPAT, YW_CHARSET)
                . "&quot;</div>\n";
        }

        list (, $action, $varsTemp) = $matches;
        $vars[$varsTemp] = $varsTemp; // usefull for {{action/vars_temp}}

        // Now that we have the action's name, we can check if the user
        // satisfies the ACLs
        if (! $this->CheckModuleACL($action, 'action')) {
            // TODO UGLY no html !!
            return '<div class="alert alert-danger">'
                . _t('ERROR_NO_ACCESS')
                . "$action.</div>\n";
        }

        // match all attributes (key and value)
        // prepare an array for extract() to work with (in $this->IncludeBuffered())
        if (preg_match_all("/([a-zA-Z0-9]*)=\"(.*)\"/U", $varsTemp, $matches)) {
            for ($a = 0; $a < count($matches[1]); $a ++) {
                $vars[$matches[1][$a]] = $matches[2][$a];
            }
        }

        if (!$forceLinkTracking) {
            $this->StopLinkTracking();
        }

        if ($actionObj = $this->getActionObject($action)) {
            $result = $actionObj;
            if (is_object($result)) {
                $result = $actionObj->PerformAction($vars, $cmd);
            }
        } else { // $actionObj == null (not found, no error message)

            $this->parameter = &$vars;
            // TODO UGLY no html !!
            $result = $this->IncludeBuffered(
                strtolower($action) . '.php',
                '<div class="alert alert-danger">'
                    . _t('UNKNOWN_ACTION')
                    . " &quot;$action&quot;</div>\n",
                $vars,
                $this->config['action_path']
            );
            unset($this->parameter);
        }
        // shouldn't we restore the previous status ?
        $this->StartLinkTracking();
        return $result;
    }

    /**
     * Finds the object corresponding to an action, if it exists.
     *
     * @param string $name
     *            The name of an action (should be alphanumeric)
     * @return mixed - null if the corresponding file was not found or the
     *            corresponding class didn't exist after inclusion
     *         - an error string if the corresponding file was found but an
     *            error append while loading it
     *         - the object corresponding to this action if no problem happend
     *         To check the result, you should use is_object() on it.
     *         You should always assign the result of this method by referrence
     *         to avoid copying the object, which is the default beheviour in PHP4.
     * @example $var = &$wiki->getActionObject('actionname');
     *          if (is_object($var))
     *          {
     *          // normal behaviour
     *          }
     *          elseif ($var) // $var is not an object but an error string
     *          {
     *          // threat error
     *          }
     *          else // action was not found
     *          {
     *          // rescue from inexising action or sth
     *          }
     */
    public function getActionObject($name)
    {
        $name = strtolower($name);
        $actionObj = null; // the generated object
        if (!preg_match('/^[a-z0-9]+$/', $name)) { // paranoiac
            return $actionObj;
        }

        // already tried to load this object ? (may be null)
        if (isset($this->actionObjects[$name])) {
            return $this->actionObjects[$name];
        }

        // object not loaded, try to load it
        $filename = $name . '.class.php';
        // load parent class for all action objects (only once)
        require_once 'includes/WikiNiAction.class.php';
        require_once 'includes/WikiNiAdminAction.class.php';
        // include the action file, this should return an empty string
        $result = $this->IncludeBuffered(
            $filename,
            null,
            null,
            $this->GetConfigValue('action_path')
        );
        if ($result) {
            // the result was not an empty string, certainly an error message
            $actionObj = $result;
        } elseif ($result !== false) {
            // the result was empty but the file was found
            $class = 'Action' . ucfirst($name);
            if (class_exists($class)) {
                $actionObj = new $class($this);
                if (! is_a($actionObj, 'WikiniAction')) {
                    // TODO UGLY no html !!
                    die(_t('INVALID_ACTION') . " '$name': " . _t('INCORRECT_CLASS'));
                }
            }
        }

        // Add to cached actionObject
        $this->actionObjects[$name] = &$actionObj;

        return $actionObj;
    }
}
